<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">


<generatorConfiguration>
    <!-- MBG需要额外加载的依赖包-->
    <classPathEntry location="mysql-connector-java-5.1.18.jar"/>
    <!--
    Context
        defaultModelType:指定生成对象的样式
            1，conditional：类似hierarchical；
            2，flat：所有内容（主键，blob）等全部生成在一个对象中；
            3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)
        targetRuntime:
            1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；
            2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；
        introspectedColumnImpl：类全限定名，用于扩展MBG
    -->
    <context id="mysql">

        <!-- 生成Java文件的编码 ： 非必选-->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 格式化Java代码 ： 非必选-->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化XML代码 ： 非必选-->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>
        <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>

        <jdbcConnection driverClass="com.mysql.jdbc.Driver" connectionURL="jdbc:mysql://localhost:3306/smpt?characterEncoding=utf8" userId="root" password="123456"></jdbcConnection>

        <!--
            java类型处理器 ： 非必选
            用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；
            注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型；
        -->
        <javaTypeResolver type="org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl">
            <!--
                true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
                false：默认,
                    scale>0;length>18：使用BigDecimal;
                    scale=0;length[10,18]：使用Long；
                    scale=0;length[5,9]：使用Integer；
                    scale=0;length<5：使用Short；
             -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>


        <!--
            java bean 生成 ： 必选
            targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；
            targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录
        -->
        <javaModelGenerator targetPackage="com.qg.smpt.web.model.test"
                            targetProject="/home/tisong/CodeWorld/J2EE/smart_printers/src/main/java">
            <!--  自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter-->
            <property name="constructorBased" value="false"/>
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="false" />
            <!-- 是否创建一个不可变的类，如果为true，那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类-->
            <property name="immutable" value="false"/>
            <!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->
            <property name="trimStrings" value="true" />
        </javaModelGenerator>

        <!--配置实体map接口（dao）-->
        <sqlMapGenerator targetPackage="/" targetProject="/home/tisong/CodeWorld/J2EE/smart_printers/src/main/resources">
            <property name="enableSubPackages" value="false" />
        </sqlMapGenerator>


        <!--
            对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口
            type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
                1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
                2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
                3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
            注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
        -->
        <javaClientGenerator type="XMLMAPPER"
                             targetPackage="com.qg.smpt.web.repository"
                             targetProject="/home/tisong/CodeWorld/J2EE/smart_printers/src/main/java">
            <property name="enableSubPackages" value="false" />
        </javaClientGenerator>

        <!--配置实体-->
        <table tableName="orders" domainObjectName="Order"
            enableCountByExample="false" enableUpdateByExample="false"
            enableDeleteByExample="false" enableSelectByExample="false"
            selectByExampleQueryId="false">
            <!-- 用于生成主键的方法 ，MBG会在生成的insert元素中生成一条正确的 selectKey 元素，该元素可选 -->
            <!-- Mysql : 相当于 selectKey 的SQL为 ： SELECT LAST_INSERT_ID() -->
            <generatedKey column="id" sqlStatement="Mysql"/>

            <!--
            <columnOverride column="user_name">
                <property name="property" value="userName"/>
                <property name="javaType" value="java.lang.String"/>
                <property name="jdbcType" value=""/>
            </columnOverride>
            -->
            <!--<ignoreColumn column=""/> -->
        </table>

        <table tableName="printer" domainObjectName="Printer"
               enableCountByExample="false" enableUpdateByExample="false"
               enableDeleteByExample="false" enableSelectByExample="false"
               selectByExampleQueryId="false">
            <!-- 用于生成主键的方法 ，MBG会在生成的insert元素中生成一条正确的 selectKey 元素，该元素可选 -->
            <!-- Mysql : 相当于 selectKey 的SQL为 ： SELECT LAST_INSERT_ID() -->
            <generatedKey column="id" sqlStatement="Mysql"/>

            <!--
            <columnOverride column="user_name">
                <property name="property" value="userName"/>
                <property name="javaType" value="java.lang.String"/>
                <property name="jdbcType" value=""/>
            </columnOverride>
            -->
            <!--<ignoreColumn column=""/> -->
        </table>

        <table tableName="user" domainObjectName="User"
               enableCountByExample="false" enableUpdateByExample="false"
               enableDeleteByExample="false" enableSelectByExample="false"
               selectByExampleQueryId="false">
            <!-- 用于生成主键的方法 ，MBG会在生成的insert元素中生成一条正确的 selectKey 元素，该元素可选 -->
            <!-- Mysql : 相当于 selectKey 的SQL为 ： SELECT LAST_INSERT_ID() -->
            <generatedKey column="id" sqlStatement="Mysql"/>

            <!--
            <columnOverride column="user_name">
                <property name="property" value="userName"/>
                <property name="javaType" value="java.lang.String"/>
                <property name="jdbcType" value=""/>
            </columnOverride>
            -->
            <!--<ignoreColumn column=""/> -->
        </table>

    </context>
</generatorConfiguration>